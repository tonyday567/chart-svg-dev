
* chart-svg-dev

[[https://hackage.haskell.org/package/chart-svg-dev][https://img.shields.io/hackage/v/chart-svg-dev.svg]]
[[https://github.com/tonyday567/chart-svg-dev/actions?query=workflow%3Ahaskell-ci][https://github.com/tonyday567/chart-svg-dev/workflows/haskell-ci/badge.svg]]

~chart-svg-dev~ is a development environment for chart-svg.

* Imports

#+begin_src haskell-ng :results output
:r
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedLabels
:set -XOverloadedStrings
:set -XTupleSections
import Lib
import Prelude
import Control.Category ((>>>))
import Data.Function
import Data.Maybe
import Data.Bool
import Faker.Lorem
import Chart
import Prettychart
import Chart.Examples
import Optics.Core
import Data.ByteString.Char8 qualified as C
import Data.Text qualified as T
import Control.Monad
import NumHask.Prelude qualified as NH
import Data.Functor.Identity
import Data.Bifunctor
import Prettyprinter
import Text.Pretty.Simple
import MarkupParse
(display, quit) <- startChartServer (Just "chart-svg-dev")
#+end_src

#+RESULTS:
: Ok, one module loaded.
: Setting phasers to stun... (port 9g1h6c0i)>  (ctrl-c to quit)

#+begin_src haskell-ng :results output
writeAllExamples
#+end_src

#+RESULTS:
: ok

#+begin_src haskell-ng :results output
display dateExample
#+end_src

#+RESULTS:
: True

* Next chart-svg repo checklist

- [X] upgrade Haskell
- [X] cabal.project check
- [X] upstream publishings
- [X] cabal update
- [X] cabal build
- [X] cabal outdated
- [X] cabal gen-bounds
- [X] cabal-fix
- [X] cabal build --ghc-options=-Wunused-packages
- [ ] cabal build --prefer-oldest
- [X] FIXMEs & TODOs
- [X] dots in cabal file
- [X] pragma cleanup
- [X] cabal-docspec
- [X] cabal test
- [X] cabal bench
- [X] ormolu
- [X] hlint
- [X] bump version
- [X] CI upgrade
- [ ] push & check CI
- [ ] haddock
- [ ] readme
- [ ] magit range
- [ ] ChangeLog
- [X] PR to main
- [ ] merge PR
- [ ] immediate checkout and pull main
- [ ] exact version bump
- [ ] hkgr tagdist
- [ ] hkgr publish

* v06 Changes

Chart.Compound

barTexts
barTextCharts
textShiftVert

- singletonGuard
+ isSingleton

- HudBox
- CanvasBox

+ ChartBox

- hudchart box lenses
+ HudChartSection
+ hudChartBox'

- runHud
+ finalCanvas

removed State from Hud concept

defaultXAxisOptions

flipPlace
- placeText

TickStyle
Tick

defaultGlyphTickStyle etc
defaultXTicks

axis --> axisHud
title --> titleHud
legend --> legendHud

legendChart
 freezeAxes,
+    freezeTicks,
+    formatN',
+    numTicks',
+    tickExtend',
+    projectChartTreeWith,
+    placeLegend,
+    fromHudChart,
+    makeHuds,
+    legendText,
+    legendEntry,
+    legendizeChart,

Priority change

+projectChartTreeWith :: ChartAspect -> HudOptions -> ChartTree -> ChartTree

Ticks element names

tick lenses

scaleP

Primitive

Chart patterns and chart data lenses

.~ removal

scaleChartData
colourStyle

+ safeBox'
- overText

blankChart
projectChartTreeN

palette paletteO

-    surfaceLegendChart,
-    surfaceAxisOptions,
+    surfaceLegendAxisOptions,
+    gridReferenceChart,

+ ScaleP
+ scaleratio

Style consolidation
EscapeText

** ToDo component dot graph

* Done example problems
:LOGBOOK:
- State "Done"       from "ToDo"       [2023-11-30 Thu 11:12]
:END:

** Done pathExample
:LOGBOOK:
- State "Done"       from "ToDo"       [2023-11-30 Thu 11:12]
:END:
- [X] move text

#+begin_src haskell-ng :results output
display $ pathExample & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #anchorTo) CanvasStyleSection & set (#hudOptions % #axes % each % #item % #bar %? #anchorTo) CanvasStyleSection

#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
ps = [ StartP (Point 0 0), LineP (Point 1 0), CubicP (Point 0.2 0) (Point 0.25 1) (Point 1 1), QuadP (Point (-1) 2) (Point 0 1), ArcP (ArcInfo (Point 1 1) (-pi / 6) False False) (Point 0 0)]
ts = [ "StartP (Point 0 0)", "LineP (Point 1 0)", "CubicP (Point 0.2 0) (Point 0.25 1) (Point 1 1)", "QuadP (Point (-1) 2) (Point 0 1)", "ArcP (ArcInfo (Point 1 1) (-pi / 6) False False) (Point 0 0)"]
path' = PathChart (defaultPathStyle & #color .~ palette1a 0 0.05 & #borderColor .~ palette1a 1 0.3) ps
c0 = GlyphChart defaultGlyphStyle ((SquareGlyph,) . pointPath <$> ps)
midp = Point 0 0 : zipWith (\(Point x y) (Point x' y') -> Point ((x + x') / 2) ((y + y') / 2)) (drop 1 (pointPath <$> ps)) (pointPath <$> ps)
offp = [Point (-0.35) 0.05, Point 0 0.05, Point (-0.2) 0, Point (-0.1) 0.1, Point 0 (-0.1)]
t0 = TextChart (defaultTextStyle & set #size 0.025) (zip ts (zipWith addp offp midp))
display $ mempty & #charts .~ named "path" [path', c0] <> named "pathtext" [t0] & #hudOptions .~ defaultHudOptions & #markupOptions % #chartAspect .~ ChartAspect & #markupOptions % #cssOptions % #preferColorScheme .~ PreferHud & #markupOptions % #cssOptions % #cssExtra .~ fillSwitch (dark, light) "dark" "pathtext"
#+end_src

#+RESULTS:
: True

** Done lineExample
:LOGBOOK:
- State "Done"       from              [2023-11-30 Thu 10:59]
:END:


#+begin_src haskell-ng :results output
co = lineExample & set (#hudOptions % #legends % each % _2 % #size) 0.2 & set (#hudOptions % #legends % each % _2 % #frame) (Just defaultRectStyle) & set (#hudOptions % #legends % each % _2 % #vgap) 0 & set (#hudOptions % #legends % each % _2 % #outerPad) 0 & set (#hudOptions % #legends % each % _2 % #innerPad) 0 & set (#hudOptions % #legends % each % _2 % #textStyle % #frame) (Just defaultRectStyle) & set (#hudOptions % #legends % each % _2 % #overallScale) 0.5 & set (#hudOptions % #legends % each % _2 % #scaleP) ScalePX
writeChartOptions "other/line.svg" co
display co
#+end_src

#+RESULTS:
: True
** Done legends
:LOGBOOK:
- State "Done"       from "ToDo"       [2023-11-30 Thu 10:59]
- State "Done"       from "Next"       [2023-11-27 Mon 14:45]
:END:

*** frame bug
- [X] add scaleP for legendoptions

lineExample legend with zero gaps and padding highlights that:

- charts scale independently in the X and Y dimensions
- chart styles scale proportionately.

Thus legends have to choose to compromise by adopting X, Y, Area or MinDim

#+begin_src haskell-ng :results output
lo0 = defaultLegendOptions & set (#textStyle % #frame) (Just defaultRectStyle) & set #vgap 0 & set #hgap 0 & set #outerPad 0 & set #innerPad 0 & set #overallScale 0.2 & set #size 0.3 & set #legendCharts (take 3 $ fromMaybe undefined $ preview (#hudOptions % #legends % ix 0 % _2 % #legendCharts) lineExample) & set #buffer 0

-- manual construction
cs = legendChart lo0
view styleBox' cs

c0 = unnamed [RectChart defaultRectStyle [one]]
cs'' = cs & over (charts' % each) (scaleChart 0.3)
cs''' = placeLegend lo0 one cs'' & set (charts' % each % #style % #scaleP) ScalePX
view styleBox' $ set styleBox' (Just one) (c0 <> cs''')

-- automated construction via HudOptions
display $ (mempty :: ChartOptions) & set #charts c0 & set (#markupOptions % #chartAspect) ChartAspect & set #hudOptions (mempty & set #legends [(100,lo0 & set #scaleP ScalePArea)]) -- defaultHudOptions
#+end_src

#+RESULTS:
: Just Rect -2.5e-3 1.6023999999999998 -9.129999999999999e-2 0.44650000000000006
: Just Rect -0.5 0.5 -0.5 0.5
: True

*** Done large text bug
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-30 Thu 10:59]
:END:



Manual construction and placement for a legend, using ScalePX.

A slight space opens up between the horizontal elements.

#+begin_src haskell-ng :results output
lo0 = defaultLegendOptions & set (#textStyle % #frame) (Just defaultRectStyle) & set (#textStyle % #size) 0.16 & set #vgap 0 & set #hgap 0 & set #outerPad 0 & set #innerPad 0 & set #overallScale 0.2 & set #size 0.2 & set #legendCharts (take 3 $ fromMaybe undefined $ preview (#hudOptions % #legends % ix 0 % _2 % #legendCharts) lineExample) & set #buffer 0 & set #scaleP ScalePX

-- manual construction
cs = legendChart lo0 & set (charts' % each % #style % #scaleP) (view #scaleP lo0)
view styleBox' cs

c0 = unnamed [RectChart defaultRectStyle [one]]
cs'' = cs & over (charts' % each) (scaleChart 0.3)
cs''' = placeLegend lo0 one cs''
view styleBox' $ set styleBox' (Just one) (c0 <> cs''')

display $ (mempty :: ChartOptions) & set #charts (c0 <> cs''') & set (#markupOptions % #chartAspect) (FixedAspect 1) & set #hudOptions defaultHudOptions
#+end_src

#+RESULTS:
: Just Rect -2.5e-3 1.4024 -9.129999999999999e-2 0.44650000000000006
: Just Rect -0.5 0.49999999999999994 -0.5 0.5
: True

#+begin_src haskell-ng :results output
:t legendEntry lo0 "palette #0"
:t fmap (legendizeChart lo0) <$> (toListOf (#charts % charts') lineExample)
:t view #legendCharts lo0
:t legendText lo0
l = defaultLegendOptions & set (#textStyle % #frame) (Just defaultRectStyle) & set (#textStyle % #size) 0.12 & set #vgap 0 & set #hgap 0 & set #outerPad 0 & set #innerPad 0 & set #overallScale 0.2 & set #size 0.2 & set #legendCharts (take 3 $ fromMaybe undefined $ preview (#hudOptions % #legends % ix 0 % _2 % #legendCharts) lineExample) & set #buffer 0
es = reverse $ uncurry (legendEntry l) <$> view #legendCharts l
twidth = maybe zero (\(Rect x z _ _) -> z - x) (styleBoxes (fst <$> es))
gapwidth t = maybe 0 (\(Rect x z _ _) -> z - x) (sbox t)
twidth
x1 = vert 0 $ hori 0 <$> (\(t,a) -> [unnamed [t], unnamed a]) <$> es
x2 = x1 & set (charts' % each % #style % #scaleP) ScalePArea
display $ (mempty :: ChartOptions) & set #charts x2 & set (#markupOptions % #chartAspect) ChartAspect & set #hudOptions defaultHudOptions
#+end_src

#+RESULTS:
: legendEntry lo0 "palette #0" :: [Chart] -> (Chart, [Chart])
: fmap (legendizeChart lo0) <$> (toListOf (#charts % charts') lineExample)
:   :: [[Chart]]
: view #legendCharts lo0 :: [(Text, [Chart])]
: legendText lo0 :: Text -> Chart
: 0.7212000000000001
: True

** Done surface legend
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-28 Tue 14:25]
:END:

#+begin_src haskell-ng :results output
display surfaceExample
#+end_src

#+RESULTS:
: True

scale and move basic charts

#+begin_src haskell-ng :results output
c' = [RectChart (defaultRectStyle & set #scaleP NoScaleP)  [one]]
cs = (mconcat [named "left" c', named "right" c' & over (charts' % each) (scaleChart 0.5 >>> moveChart (Point 0.8 0.25))])
display $ (mempty :: ChartOptions) & set #charts cs & set #hudOptions defaultHudOptions
#+end_src

#+RESULTS:
: True

scale and move legend

#+begin_src haskell-ng :results output
slc = surfaceLegendChart (Range (-0.5) 0.5) (defaultSurfaceLegendOptions dark "surface" & set (#sloLegendOptions % #vgap) 0.1 & set (#sloLegendOptions % #size) 0.6 & set (#sloLegendOptions % #hgap) 0 & set (#sloLegendOptions % #textStyle % #frame) (Just defaultRectStyle) & set (#sloAxisOptions % #ticks % #gtick) (Just (defaultGlyphTick, HLineGlyph, (-0.014))) & set (#sloAxisOptions % #ticks % #ttick) (Just (defaultTextTick, -0.005))) & set (charts' % each % #style % #scaleP) ScaleMinDim
display $ (mempty :: ChartOptions) & set #charts (mconcat [named "proxy" c', slc & set (charts' % each % #style % #scaleP) ScalePArea & over (charts' % each) (scaleChart 1 >>> moveChart (Point 0.6 (-0.3)))]) & set #hudOptions defaultHudOptions
#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
grain = Point 100 100
r = one
f = fst . bimap ((-1.0) *) (fmap ((-1.0) *)) . rosenbrock 1 10
evenColors = trimColour . over lightness' (const 0.55) . palette1 <$> [0 .. 5]
so = defaultSurfaceOptions & #soGrain .~ grain & #soRange .~ r & #soStyle % #surfaceColors .~ evenColors
(cs, rangef) = surfacef f so
slo = defaultSurfaceLegendOptions dark "surface" & set #sloWidth 0.1 & set (#sloStyle % #surfaceColors) evenColors & set (#sloLegendOptions % #vgap) 0.1 & set (#sloLegendOptions % #size) 0.6 & set (#sloLegendOptions % #hgap) 0 & set (#sloLegendOptions % #textStyle % #frame) (Just defaultRectStyle) & set (#sloAxisOptions % #ticks % #gtick) (Just (defaultGlyphTick, HLineGlyph, (-0.014))) & set (#sloAxisOptions % #ticks % #ttick) (Just (defaultTextTick, -0.005))

slc = surfaceLegendChart rangef slo & set (charts' % each % #style % #scaleP) ScaleMinDim
-- display $ (mempty :: ChartOptions) & set #charts (mconcat [named "surface" cs, slc & set (charts' % each % #style % #scaleP) ScalePArea & over (charts' % each) (scaleChart 1 >>> moveChart (Point 0.6 (-0.3)))]) & set #hudOptions defaultHudOptions
display $ (mempty :: ChartOptions) & set #charts (mconcat [slc]) & set #hudOptions defaultHudOptions & #markupOptions .~ (defaultMarkupOptions & #cssOptions % #shapeRendering .~ UseCssCrisp)
#+end_src

addSurfaceLegend version

#+begin_src haskell-ng :results output
grain = Point 100 100
r = one
f = fst . bimap ((-1.0) *) (fmap ((-1.0) *)) . rosenbrock 1 10
evenColors = trimColour . over lightness' (const 0.55) . palette1 <$> [0 .. 5]
so = defaultSurfaceOptions & #soGrain .~ grain & #soRange .~ r & #soStyle % #surfaceColors .~ evenColors
(cs, rangef) = surfacef f so
slo = defaultSurfaceLegendOptions dark "surface" & set #sloWidth 0.1 & set (#sloStyle % #surfaceColors) evenColors & set (#sloLegendOptions % #vgap) 0.1 & set (#sloLegendOptions % #size) 0.6 & set (#sloLegendOptions % #hgap) 0 & set (#sloLegendOptions % #textStyle % #frame) (Just defaultRectStyle) & set (#sloAxisOptions % #ticks % #gtick) (Just (defaultGlyphTick, HLineGlyph, (-0.014))) & set (#sloAxisOptions % #ticks % #ttick) (Just (defaultTextTick, -0.005))

slc = surfaceLegendChart rangef slo & set (charts' % each % #style % #scaleP) ScaleMinDim
-- display $ (mempty :: ChartOptions) & set #charts (mconcat [named "surface" cs, slc & set (charts' % each % #style % #scaleP) ScalePArea & over (charts' % each) (scaleChart 1 >>> moveChart (Point 0.6 (-0.3)))]) & set #hudOptions defaultHudOptions
display $ (mempty :: ChartOptions) & set #charts (mconcat [slc]) & set #hudOptions defaultHudOptions & #markupOptions .~ (defaultMarkupOptions & #cssOptions % #shapeRendering .~ UseCssCrisp)
#+end_src

#+RESULTS:
: True

- [ ] addHud
- [ ] projectChartTree
- [ ] mconcat with main chart

co version

#+begin_src haskell-ng :results output
display $ (mempty :: ChartOptions) & set #charts (gridReferenceChart rangef slo) & set #hudOptions (mempty & set #axes [(1, view #sloAxisOptions slo & set #place PlaceRight)]) & set #markupOptions (defaultMarkupOptions & set (#cssOptions % #shapeRendering) UseCssCrisp) & set (#markupOptions % #chartAspect) (FixedAspect 0.2)
#+end_src

#+RESULTS:
: True

charttree version

#+begin_src haskell-ng :results output
grain = Point 100 100
r = one
f = fst . bimap ((-1.0) *) (fmap ((-1.0) *)) . rosenbrock 1 10
evenColors = trimColour . over lightness' (const 0.55) . palette1 <$> [0 .. 5]
so = defaultSurfaceOptions & #soGrain .~ grain & #soRange .~ r & #soStyle % #surfaceColors .~ evenColors
(cs, rangef) = surfacef f so

slo = defaultSurfaceLegendOptions & set (#sloSurfaceStyle % #surfaceColors) evenColors
grc = gridReferenceChart rangef slo
hoLegend = (mempty :: HudOptions) & set #axes [(1, view #sloAxisOptions slo)]
grcLegend = addHud (FixedAspect (view #sloWidth slo)) hoLegend grc
ct = view #charts surfaceExample
ctbox = fromMaybe one (view styleBox' ct)
legbox = projectOnR ctbox one (view #sloRect slo)
ctBoth = mconcat [projectChartTree legbox grcLegend, ct]
display $ (mempty :: ChartOptions) & set #charts ctBoth & set #markupOptions (defaultMarkupOptions & set (#cssOptions % #shapeRendering) UseCssCrisp) & set (#markupOptions % #chartAspect) ChartAspect & set #hudOptions defaultHudOptions
#+end_src

#+RESULTS:
: True

addSurfaceLegend version

#+begin_src haskell-ng :results output
grain = Point 20 20
r = one
f = fst . bimap ((-1.0)
slo = defaultSurfaceLegendOptions & set (#sloSurfaceStyle % #surfaceColors) evenColors & set (#sloDataRange) rangef

cs' = addSurfaceLegend slo (unnamed cs)

display $ (mempty :: ChartOptions) & set #charts cs' & set #markupOptions (defaultMarkupOptions & set (#cssOptions % #shapeRendering) UseCssCrisp) & set (#markupOptions % #chartAspect) ChartAspect & set #hudOptions defaultHudOptions
#+end_src

#+RESULTS:
: True

** Done compoundExample
:LOGBOOK:
- State "Done"       from              [2023-11-30 Thu 10:58]
:END:

#+begin_src haskell-ng :results output
display compoundExample
#+end_src

#+RESULTS:
: True

- [X] try a no extend
- [X] try a ScalePArea
- [X] simplest decompose

*** original compoundExample

#+begin_src haskell-ng :results output
ts = TickRound (FormatN FSCommaPrec (Just 1) 4 True True) 5 TickExtend
tsf = set (#hudOptions % #axes % each % _2 % #ticks % #style) ts
sap = set (#charts % charts' % each % #style % #scaleP) ScalePArea
co = compoundMerge [lineExample & tsf & sap, unitExample & tsf & sap & #hudOptions % #axes %~ fmap (_2 % #place %~ flipPlace)]
display co
#+end_src

#+RESULTS:
: True

*** simple experiment

- [X] titles ok
- [X] noextend axes ok
- [X] extend axes



#+begin_src haskell-ng :results output
ts = TickRound (FormatN FSCommaPrec (Just 1) 4 True True) 4 NoTickExtend
tse = TickRound (FormatN FSCommaPrec (Just 1) 4 True True) 4 TickExtend
tsf = set (#axes % each % _2 % #ticks % #style)
sap = set (#charts % charts' % each % #style % #scaleP) ScalePArea
ho1 = (mempty :: HudOptions) & set #titles [(3,defaultTitle "chart1")] & set #axes [(2,defaultXAxisOptions), (2,defaultYAxisOptions)] & tsf ts & colourHudOptions (const (palette1 0))
c1 = (mempty :: ChartOptions) & set #hudOptions ho1 & set #charts (named "c1" [Chart defaultRectStyle (RectData [fmap (2*) one])])

ho2 = (mempty :: HudOptions) & set #titles [(3.1,defaultTitle "chart2")] & set #axes [(2,defaultXAxisOptions & set #place PlaceTop), (2,defaultYAxisOptions & set #place PlaceRight)] & tsf ts & colourHudOptions (const (palette1 3))
c2 = (mempty :: ChartOptions) & set #hudOptions ho2 & set #charts (named "c2" [Chart (blob (set opac' 0.3 $ palette1 3)) (RectData [fmap (*0.8) one]), BlankChart defaultStyle [one]])
co = compoundMerge [c1,c2]
display co
#+end_src

#+RESULTS:
: True
*** new example

#+begin_src haskell-ng :results output
ho1 = (mempty :: HudOptions) & set #titles [(3,defaultTitle "chart1")] & set #axes [(2,defaultXAxisOptions), (2,defaultYAxisOptions)] & colourHudOptions (const (palette1 0))
c1 = (mempty :: ChartOptions) & set #hudOptions ho1 & set #charts (named "c1" [Chart defaultRectStyle (RectData [fmap (2*) one])])

ho2 = (mempty :: HudOptions) & set #titles [(3.1,defaultTitle "chart2")] & set #axes [(2,defaultXAxisOptions & set #place PlaceTop), (2,defaultYAxisOptions & set #place PlaceRight)] & colourHudOptions (const (palette1 3))
c2 = (mempty :: ChartOptions) & set #hudOptions ho2 & set #charts (named "c2" [Chart (blob (set opac' 0.3 $ palette1 3)) (RectData [fmap (*0.8) one]), BlankChart defaultStyle [one]])
co = compoundMerge [c1,c2]
display co
#+end_src

#+RESULTS:
: True

** Done stackExample
:LOGBOOK:
- State "Done"       from "ToDo"       [2023-11-24 Fri 06:41]
:END:

#+begin_src haskell-ng :results output
display $ mempty & set #charts (stack 4 0.1 (replicate 16 $ (view #charts $ (set (#charts % charts' % each % #style % #scaleP) ScalePArea) $ forgetHud lineExample)))
#+end_src

#+RESULTS:
: True

** Done bar & sbar
:LOGBOOK:
- State "Done"       from "ToDo"       [2023-11-27 Mon 18:28]
- State "Done"       from "Next"       [2023-11-23 Thu 20:51]
:END:

- [X] numbers are badly placed on both X and Y axis
- [X] Not due to negative
- [X] numbers a bit small
- [X] vgap on legend
- [X] legend skewif
- [X] bar Hori text is still Vert
- [X] Stacked not showing second series
- [X] bar Hori axis is wrong, extending beyond the original

zeroised

#+begin_src haskell-ng :results output
e1 = barDataExample & over #barData (fmap (fmap (max 1))) & over #barData (fmap (take 4))
display $ barChart (defaultBarOptions & set (#barTextStyles % each % #anchor) AnchorMiddle & set (#barTextStyles % each % #size) 0.2 & set #textGap 0 & set #textGapNegative 0) e1 & set (#markupOptions % #chartAspect) (FixedAspect 1) & set (#charts % charts' % each % #style % #scaleP) ScalePArea
#+end_src

#+RESULTS:
: True

too dependent on original barRect scale

Hori

#+begin_src haskell-ng :results output
n = 1
barDataExample' = barDataExample & over #barData (fmap (fmap (*n)))
bo = (defaultBarOptions & set (#barOrientation) Hori & set (#barTextStyles % each % #anchor) AnchorMiddle & set (#barTextStyles % each % #size) 0.03 & set #textGap 0.03 & set #textGapNegative 0.05) & set #textShiftVert (-0.008)
display $ barChart bo barDataExample'
#+end_src

#+RESULTS:
: True

Vert

#+begin_src haskell-ng :results output
n = 1
barDataExample' = barDataExample & over #barData (fmap (fmap (*n)))
bo = (defaultBarOptions & set (#barOrientation) Vert & set (#barTextStyles % each % #size) 0.03 & set #textGap 0.03 & set #textGapNegative 0.05) & set #textShiftVert (-0.008)
display $ barChart bo barDataExample' & set (#markupOptions % #chartAspect) (FixedAspect 1.5) & set (#charts % charts' % each % #style % #scaleP) ScalePArea & set (#hudOptions % #frames) [(101, defaultFrameOptions & set #buffer 0.02)] & set (#hudOptions % #legends) []
#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
barRects bo (view #barData barDataExample')
barTexts bo (view #barData barDataExample')
#+end_src

** Done ellipse & quad & cubic
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-27 Mon 14:52]
:END:
- [X] title
- [X] yaxis ticks
- [X] quad
- [X] cubic

** Done textExample
:LOGBOOK:
- State "Done"       from "Next"       [2023-12-02 Sat 16:00]
- State "Done"       from              [2023-11-23 Thu 21:02]
:END:

- [X] bad y axis ticks
- [X] funny axis bar

#+begin_src haskell-ng :results output
co = textExample
display co
#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
co & view #chartTree & view box'
#+end_src

#+RESULTS:
: Just Rect 0.0 0.9995736030415051 0.0 25.0

#+begin_src haskell-ng :results output
forgetHud co & toListOf (#chartTree % charts' % each % #style % #scaleP)
#+end_src

#+RESULTS:
: [ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea,ScalePArea]

** higher number of ticks

#+begin_src haskell-ng :results output
co = unitExample & set (#hudOptions % #axes % each % _2 % #ticks % #style % numTicks') (Just 8) & over (#charts % charts' % each % #chartData) (scaleChartData 1)
display co
#+end_src

#+RESULTS:
: True

** Done dateExample
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-30 Thu 14:46]
:END:

- [X] y axis ticks being cut off

#+begin_src haskell-ng :results output
display $ dateExample & set (#hudOptions % #frames) [(100,defaultFrameOptions & set #buffer 0.05)]
#+end_src

#+RESULTS:
: True

* Exact reproduction of proportionate scaling

Scaling of style elements is proportional to the ratio of areas of the before and after rectangle. This means that individual elements do not scale to the exact proportions of the overall projections.

The effect is typically small but in pathological instances can cause irritation.

An extreme example, where:

- tick and text marks fail to scale properly, if NoScaleP (the default) is used.
- tick marks (almost) scale on ScalePArea, but text tick fails, because of an auto change in format

#+begin_src haskell-ng :results output
scale = NoScaleP
asp = FixedAspect 2
cszero =  (unnamed [blankChart1 one]) & over (charts' % each % #chartData) (scaleChartData 1)
r1 = fmap (*1) (Rect 0 1 0 1)
bar' = (AxisBar (border 0.001 (grey 0.3 1)) 0.05 0 0)
rs1 = border 0.001 (grey 0.3 1)
tt = (defaultTextTick & set #scaleP scale,0)
gt = defaultGlyphTick & set #scaleP scale & set #borderSize 0.001 & set #color (grey 0.3 1) & set #size 0.1
axes0 = [(5,defaultYAxisOptions & set #place PlaceLeft), (5,defaultXAxisOptions & set #place PlaceBottom)] & set (each % _2 % #ticks % #ltick) Nothing & set (each % _2 % #bar) (Just bar') & set (each % _2 % #ticks % #ttick) (Just tt) & set (each % _2 % #ticks % #ttick %? _2) 0 & set (each % _2 % #ticks % #gtick %? _1) gt & set (each % _2 % #ticks % #gtick %? _3) 0.0 & set (each % _2 % #ticks % #ttick %? _1 % #frame) (Just (border 0.005 black))
cozero = (mempty :: ChartOptions) & set #charts cs & set (#hudOptions % #axes) axes0 & set (#hudOptions % #frames) [(1,defaultFrameOptions & set #frame (Just rs1))] & set (#markupOptions % #chartAspect) asp
display cozero
#+end_src

#+RESULTS:
: True

* projectChart

- [X] get CanvasAspect working
- [X] find a non-exact single projection
- [X] styleRebox using jam

** rebox code

styleRebox is ~projectWith (r - (styleBox - box)) box~
projectChartTree is ~projectWith r styleBox~

#+begin_src haskell-ng :results output
styleBox_ :: ChartTree -> Maybe (Rect Double)
styleBox_ = styleBoxes . foldOf charts'

styleRebox_ :: ChartTree -> Maybe (Rect Double) -> ChartTree
styleRebox_ cs r =
  cs
    & over chart' (fromMaybe id $ projectWith <$> r' <*> box_ cs)
  where
    r' = (NH.-) <$> r <*> ((NH.-) <$> styleBox_ cs <*> box_ cs)

-- | Lens between a style bounding box and a ChartTree tree.
--
-- Note that a round trip may be only approximately isomorphic ie
--
-- > forall c r. \c -> view styleBox' . set styleBox' r c ~= r
styleBox' :: Lens' ChartTree (Maybe (Rect Double))
styleBox' =
  lens styleBox_ styleRebox_
#+end_src

#+begin_src haskell-ng :results output
-- | Project a chart tree to a new bounding box, guarding against singleton bounds.
projectChartTree :: Rect Double -> ChartTree -> ChartTree
projectChartTree new ct = case view styleBox' ct of
  Nothing -> ct
  Just b -> ct & over charts' (fmap (projectWith new b))
-- | projects a Chart to a new space from an old rectangular space, preserving linear metric structure.
--
-- FIXME: test singleton protections
--
-- >>> projectWith (fmap (2*) one) one r
-- RectChart (RectStyle {borderSize = 1.0e-2, borderColor = Colour 0.02 0.29 0.48 1.00, color = Colour 0.02 0.73 0.80 0.10}) [Rect -1.0 1.0 -1.0 1.0]
projectWith :: Rect Double -> Rect Double -> Chart -> Chart
projectWith new old (Chart s a) =
  Chart (scaleStyle (scaleRatio (view #scaleP s) new old) s) (projectChartDataWith new old a)

projectChartDataWith :: Rect Double -> Rect Double -> ChartData -> ChartData
projectChartDataWith new old (RectData a) = RectData (projectOnR new old <$> a)
projectChartDataWith new old (TextData a) = TextData (second (projectOnP new old) <$> a)
projectChartDataWith new old (LineData a) = LineData (fmap (projectOnP new old) <$> a)
projectChartDataWith new old (GlyphData a) = GlyphData (fmap (second (projectOnP new old)) a)
projectChartDataWith new old (PathData a) = PathData (projectPaths new old a)
projectChartDataWith new old (BlankData a) = BlankData (projectOnR new old <$> a)
#+end_src

** projection decomp

#+begin_src haskell-ng :results output
co = jal
-- co = tandp
-- co = lineExample & set (#hudOptions % #legends % each % _2 % #place) PlaceRight & set (#markupOptions % #chartAspect) (CanvasAspect 1.5)
asp = co & view (#markupOptions % #chartAspect)
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
finalCT = projectChartTreeN 4 viewbox csAndHud
boxs' = sbox <$> (mconcat $ toListOf charts' finalCT)
ct' = projectChartTree viewbox csAndHud
ct'' = set styleBox' (Just viewbox) csAndHud
putStrLn ("initial:  " <> show (initialCanvas asp Nothing))
putStrLn ("csAndHud: " <> maybe "" show (view styleBox' csAndHud))
putStrLn ("single:   " <> maybe "" show (view styleBox' ct'))
putStrLn ("final:    " <> maybe "" show (view styleBox' finalCT))
putStrLn ("rebox:    " <> maybe "" show (view styleBox' (set styleBox' (Just viewbox) csAndHud)))
ct' == ct''
display (mempty & set #charts csAndHud & set (#markupOptions % #chartAspect) ChartAspect)
#+end_src

#+RESULTS:
: initial:  Rect -0.5 0.5 -0.5 0.5
: csAndHud: Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
: single:   Rect -0.5387155110912017 0.8141468207614003 -0.5 0.5
: final:    Rect -0.5 0.5326563466786947 -0.5 0.5
: rebox:    Rect -0.5387155110912017 0.8141468207614003 -0.5 0.5
: True
: True

** multi bulk test

#+begin_src haskell-ng :results output
pPrint $ filter ((\(x,_,_) -> not x) . snd) $ second (sameMulti) <$> pathChartOptions
#+end_src

#+RESULTS:
#+begin_example
[
    ( "other/text.svg"
    ,
        ( False
        , Just Rect -0.75 0.75 -0.5 0.5
        , Just Rect -0.75 0.7499999999999998 -0.5 0.5
        )
    )
,
    ( "other/sbar.svg"
    ,
        ( False
        , Just Rect -0.75 0.75 -0.5 0.5
        , Just Rect -0.75 0.75 -0.49999999999999994 0.5
        )
    )
,
    ( "other/wave.svg"
    ,
        ( False
        , Just Rect -0.75 0.75 -0.5 0.5
        , Just Rect -0.75 0.7499999999999998 -0.5 0.5
        )
    )
,
    ( "other/quad.svg"
    ,
        ( False
        , Just Rect -0.75 0.75 -0.5 0.5
        , Just Rect -0.75 0.7499999999999998 -0.5 0.5
        )
    )
,
    ( "other/priorityv1.svg"
    ,
        ( False
        , Just Rect -0.75 0.75 -0.5 0.5
        , Just Rect -0.75 0.7500000000000002 -0.5 0.5
        )
    )
,
    ( "other/priorityv2.svg"
    ,
        ( False
        , Just Rect -0.75 0.75 -0.5 0.5
        , Just Rect -0.75 0.7500000000000002 -0.5 0.5
        )
    )
]
#+end_example

* jam

#+begin_src haskell-ng :results output
exampleText = ["jam"]
tsScale = defaultTextStyle & set #frame (Just defaultRectStyle) & set #anchor AnchorMiddle & set #scaleP ScaleMinDim
textScale = zipWith (\t x -> TextChart tsScale [(t, Point 0 x)]) exampleText [0..]
ct = unnamed textScale
jam = mempty & #charts .~ ct & set (#hudOptions % #frames) [(100,defaultFrameOptions & set #buffer 0 & set #frame (Just $ blob (grey 0.5 0.1)))] & set (#markupOptions % #chartAspect) (FixedAspect 2) :: ChartOptions
display jam
#+end_src

#+RESULTS:
: True

** Done unscaled + no hud
:LOGBOOK:
- State "Done"       from              [2023-11-24 Fri 18:03]
:END:

#+begin_src haskell-ng :results output
co = jam & set (#markupOptions % #chartAspect) UnscaledAspect & set #hudOptions mempty
display co

asp = co & view (#markupOptions % #chartAspect)
icanvas = initialCanvas asp Nothing
cs = view #charts co
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
csAndHudSingle = set styleBox' (Just viewbox) csAndHud
csm = set (styleBoxN' 10) (Just viewbox) csAndHud
csp = projectChartWith (view (#markupOptions % #repeatAspect) co) (view (#markupOptions % #chartAspect) co) (view #hudOptions co) cs

-- addHud
ho = view #hudOptions co
db = maybe one padSingletons (view box' cs)
(mdb, hs) = toHuds ho db
csPadded = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
ivb = initialCanvas asp (Just csPadded)
db' = fromMaybe db mdb
csAndHud' = runHudWith ivb db' hs csPadded
hc0 = cs & set styleBox' (Just ivb)

-- projectWith
new = ivb
old = fromMaybe one $ view styleBox' csPadded
csPaddeds = toListOf charts' csPadded & mconcat
pwData = csPaddeds & over (each % #chartData) (projectChartDataWith new old)
pwC = pwData & over (each % #style) (\s -> scaleStyle (scaleRatio (view #scaleP s) new old) s)
pwRatio = scaleRatio (view #scaleP (head $ view #style <$> pwC)) new old
pwStyle = view #style (head pwC)
pwC' = unnamed pwC


csp & view styleBox' & NH.traverse_ (show >>> ("co:" <>) >>> putStrLn)

icanvas & (show >>> ("initial canvas:" <>) >>> putStrLn)
cs & view styleBox' & NH.traverse_ (show >>> ("initial chart:" <>) >>> putStrLn)
csAndHud & view styleBox' & NH.traverse_ (show >>> ("csAndHud:" <>) >>> putStrLn)
viewbox & (show >>> ("final canvas:" <>) >>> putStrLn)
csAndHudSingle & view styleBox' & NH.traverse_ (show >>> ("single proj:" <>) >>> putStrLn)
csm & view styleBox' & NH.traverse_ (show >>> ("multi proj:" <>) >>> putStrLn)
csPadded & view styleBox' & NH.traverse_ (show >>> ("padding:" <>) >>> putStrLn)
ivb & (show >>> ("initial padded canvas:" <>) >>> putStrLn)
hc0 & view styleBox' & NH.traverse_ (show >>> ("hc0:" <>) >>> putStrLn)
csAndHud' & view styleBox' & NH.traverse_ (show >>> ("runHudWith:" <>) >>> putStrLn)

-- projectWith
ratio new & (show >>> ("ratio new:" <>) >>> putStrLn)
ratio old & (show >>> ("ratio old:" <>) >>> putStrLn)
pwRatio & (show >>> ("scale ratio:" <>) >>> putStrLn)


db' & (show >>> ("data box padded:" <>) >>> putStrLn)

svgViewbox (Rect x z y w) = (x, (-w), (z-x), (w-y))
svgvb = svgViewbox <$> (view styleBox' csm)
svgvb & NH.traverse_ (show >>> ("svg viewbox:" <>) >>> putStrLn)

#+end_src

#+RESULTS:
#+begin_example
True
co:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
initial canvas:Rect -0.5 0.5 -0.5 0.5
initial chart:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
csAndHud:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
final canvas:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
single proj:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
multi proj:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
padding:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
initial padded canvas:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
hc0:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
runHudWith:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
ratio new:1.63063063063063
ratio old:1.63063063063063
scale ratio:1.0
data box padded:Rect -0.5 0.5 -0.5 0.5
svg viewbox:(-3.0e-4,-4.83e-2,0.10859999999999997,6.66e-2)
#+end_example

** Done unscaled + zero frame
:LOGBOOK:
- State "Done"       from              [2023-11-24 Fri 18:03]
:END:

#+begin_src haskell-ng :results output
co = jam & set (#markupOptions % #chartAspect) UnscaledAspect & set #hudOptions mempty & set (#hudOptions % #frames) [(100,defaultFrameOptions & set #buffer 0 & set #frame (Just $ blob (grey 0.5 0.1)))]
display co

asp = co & view (#markupOptions % #chartAspect)
icanvas = initialCanvas asp Nothing
cs = view #charts co
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
csAndHudSingle = set styleBox' (Just viewbox) csAndHud
csm = set (styleBoxN' 10) (Just viewbox) csAndHud
csp = projectChartWith (view (#markupOptions % #repeatAspect) co) (view (#markupOptions % #chartAspect) co) (view #hudOptions co) cs

-- addHud
ho = view #hudOptions co
db = maybe one padSingletons (view box' cs)
(mdb, hs) = toHuds ho db
csPadded = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
ivb = initialCanvas asp (Just csPadded)
db' = fromMaybe db mdb
csAndHud' = runHudWith ivb db' hs csPadded
hc0 = cs & set styleBox' (Just ivb)

-- projectWith
new = ivb
old = fromMaybe one $ view styleBox' csPadded
csPaddeds = toListOf charts' csPadded & mconcat
pwData = csPaddeds & over (each % #chartData) (projectChartDataWith new old)
pwC = pwData & over (each % #style) (\s -> scaleStyle (scaleRatio (view #scaleP s) new old) s)
pwRatio = scaleRatio (view #scaleP (head $ view #style <$> pwC)) new old
pwStyle = view #style (head pwC)
pwC' = unnamed pwC


csp & view styleBox' & NH.traverse_ (show >>> ("co:" <>) >>> putStrLn)

icanvas & (show >>> ("initial canvas:" <>) >>> putStrLn)
cs & view styleBox' & NH.traverse_ (show >>> ("initial chart:" <>) >>> putStrLn)
csAndHud & view styleBox' & NH.traverse_ (show >>> ("csAndHud:" <>) >>> putStrLn)
viewbox & (show >>> ("final canvas:" <>) >>> putStrLn)
csAndHudSingle & view styleBox' & NH.traverse_ (show >>> ("single proj:" <>) >>> putStrLn)
csm & view styleBox' & NH.traverse_ (show >>> ("multi proj:" <>) >>> putStrLn)
csPadded & view styleBox' & NH.traverse_ (show >>> ("padding:" <>) >>> putStrLn)
ivb & (show >>> ("initial padded canvas:" <>) >>> putStrLn)
hc0 & view styleBox' & NH.traverse_ (show >>> ("hc0:" <>) >>> putStrLn)
csAndHud' & view styleBox' & NH.traverse_ (show >>> ("runHudWith:" <>) >>> putStrLn)

-- projectWith
ratio new & (show >>> ("ratio new:" <>) >>> putStrLn)
ratio old & (show >>> ("ratio old:" <>) >>> putStrLn)
pwRatio & (show >>> ("scale ratio:" <>) >>> putStrLn)


db' & (show >>> ("data box padded:" <>) >>> putStrLn)

svgViewbox (Rect x z y w) = (x, (-w), (z-x), (w-y))
svgvb = svgViewbox <$> (view styleBox' csm)
svgvb & NH.traverse_ (show >>> ("svg viewbox:" <>) >>> putStrLn)

#+end_src

#+RESULTS:
#+begin_example
True
co:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
initial canvas:Rect -0.5 0.5 -0.5 0.5
initial chart:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
csAndHud:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
final canvas:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
single proj:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
multi proj:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
padding:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
initial padded canvas:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
hc0:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
runHudWith:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
ratio new:1.63063063063063
ratio old:1.63063063063063
scale ratio:1.0
data box padded:Rect -0.5 0.5 -0.5 0.5
svg viewbox:(-3.0e-4,-4.83e-2,0.10859999999999997,6.66e-2)
#+end_example

** Done ChartAspect + no hud
:LOGBOOK:
- State "Done"       from              [2023-11-26 Sun 07:50]
- State "Done"       from              [2023-11-24 Fri 18:03]
:END:

- [X] border cool as!

#+begin_src haskell-ng :results output
co = jam & set (#markupOptions % #chartAspect) ChartAspect & set #hudOptions mempty
display co

asp = co & view (#markupOptions % #chartAspect)
icanvas = initialCanvas asp Nothing
cs = view #charts co
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
csAndHudSingle = set styleBox' (Just viewbox) csAndHud
csm = set (styleBoxN' 10) (Just viewbox) csAndHud
csp = projectChartWith (view (#markupOptions % #repeatAspect) co) (view (#markupOptions % #chartAspect) co) (view #hudOptions co) cs

-- addHud
ho = view #hudOptions co
db = maybe one padSingletons (view box' cs)
(mdb, hs) = toHuds ho db
csPadded = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
ivb = initialCanvas asp (Just csPadded)
db' = fromMaybe db mdb
csAndHud' = runHudWith ivb db' hs csPadded
hc0 = cs & set styleBox' (Just ivb)

-- projectWith
new = ivb
old = fromMaybe one $ view styleBox' csPadded
csPaddeds = toListOf charts' csPadded & mconcat
pwData = csPaddeds & over (each % #chartData) (projectChartDataWith new old)
pwC = pwData & over (each % #style) (\s -> scaleStyle (scaleRatio (view #scaleP s) new old) s)
pwRatio = scaleRatio (view #scaleP (head $ view #style <$> pwC)) new old
pwStyle = view #style (head pwC)
pwC' = unnamed pwC


csp & view styleBox' & NH.traverse_ (show >>> ("co:" <>) >>> putStrLn)

icanvas & (show >>> ("initial canvas:" <>) >>> putStrLn)
cs & view styleBox' & NH.traverse_ (show >>> ("initial chart:" <>) >>> putStrLn)
csAndHud & view styleBox' & NH.traverse_ (show >>> ("csAndHud:" <>) >>> putStrLn)
viewbox & (show >>> ("final canvas:" <>) >>> putStrLn)
csAndHudSingle & view styleBox' & NH.traverse_ (show >>> ("single proj:" <>) >>> putStrLn)
csm & view styleBox' & NH.traverse_ (show >>> ("multi proj:" <>) >>> putStrLn)
csPadded & view styleBox' & NH.traverse_ (show >>> ("padding:" <>) >>> putStrLn)
ivb & (show >>> ("initial padded canvas:" <>) >>> putStrLn)
hc0 & view styleBox' & NH.traverse_ (show >>> ("hc0:" <>) >>> putStrLn)
csAndHud' & view styleBox' & NH.traverse_ (show >>> ("runHudWith:" <>) >>> putStrLn)

-- projectWith
ratio new & (show >>> ("ratio new:" <>) >>> putStrLn)
ratio old & (show >>> ("ratio old:" <>) >>> putStrLn)
pwRatio & (show >>> ("scale ratio:" <>) >>> putStrLn)


db' & (show >>> ("data box padded:" <>) >>> putStrLn)

svgViewbox (Rect x z y w) = (x, (-w), (z-x), (w-y))
svgvb = svgViewbox <$> (view styleBox' csm)
svgvb & NH.traverse_ (show >>> ("svg viewbox:" <>) >>> putStrLn)

#+end_src

#+RESULTS:
#+begin_example
True
co:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
initial canvas:Rect -0.5 0.5 -0.5 0.5
initial chart:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
csAndHud:Rect -0.815315315315315 0.8153153153153154 -0.5 0.5
final canvas:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
single proj:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
multi proj:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
padding:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
initial padded canvas:Rect -0.815315315315315 0.815315315315315 -0.5 0.5
hc0:Rect -0.815315315315315 0.8153153153153154 -0.5 0.5
runHudWith:Rect -0.815315315315315 0.8153153153153154 -0.5 0.5
ratio new:1.63063063063063
ratio old:1.63063063063063
scale ratio:15.015015015015013
data box padded:Rect -0.5 0.5 -0.5 0.5
svg viewbox:(-0.8153153153153152,-0.5,1.6306306306306304,1.0)
#+end_example

** Done ChartAspect + zero frame
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-26 Sun 07:59]
- State "Done"       from              [2023-11-26 Sun 07:50]
- State "Done"       from              [2023-11-24 Fri 18:03]
:END:

#+begin_src haskell-ng :results output
co = jam & set (#markupOptions % #chartAspect) ChartAspect & set #hudOptions mempty & set (#hudOptions % #frames) [(100,defaultFrameOptions & set #buffer 0 & set #frame (Just $ blob (grey 0.5 0.1)))]
display co

asp = co & view (#markupOptions % #chartAspect)
icanvas = initialCanvas asp Nothing
cs = view #charts co
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
csAndHudSingle = set styleBox' (Just viewbox) csAndHud
csm = set (styleBoxN' 10) (Just viewbox) csAndHud
csp = projectChartWith (view (#markupOptions % #repeatAspect) co) (view (#markupOptions % #chartAspect) co) (view #hudOptions co) cs

-- addHud
ho = view #hudOptions co
db = maybe one padSingletons (view box' cs)
(mdb, hs) = toHuds ho db
csPadded = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
ivb = initialCanvas asp (Just csPadded)
db' = fromMaybe db mdb
csAndHud' = runHudWith ivb db' hs csPadded
hc0 = cs & set styleBox' (Just ivb)

-- projectWith
new = ivb
old = fromMaybe one $ view styleBox' csPadded
csPaddeds = toListOf charts' csPadded & mconcat
pwData = csPaddeds & over (each % #chartData) (projectChartDataWith new old)
pwC = pwData & over (each % #style) (\s -> scaleStyle (scaleRatio (view #scaleP s) new old) s)
pwRatio = scaleRatio (view #scaleP (head $ view #style <$> pwC)) new old
pwStyle = view #style (head pwC)
pwC' = unnamed pwC


csp & view styleBox' & NH.traverse_ (show >>> ("co:" <>) >>> putStrLn)

icanvas & (show >>> ("initial canvas:" <>) >>> putStrLn)
cs & view styleBox' & NH.traverse_ (show >>> ("initial chart:" <>) >>> putStrLn)
csAndHud & view styleBox' & NH.traverse_ (show >>> ("csAndHud:" <>) >>> putStrLn)
viewbox & (show >>> ("final canvas:" <>) >>> putStrLn)
csAndHudSingle & view styleBox' & NH.traverse_ (show >>> ("single proj:" <>) >>> putStrLn)
csm & view styleBox' & NH.traverse_ (show >>> ("multi proj:" <>) >>> putStrLn)
csPadded & view styleBox' & NH.traverse_ (show >>> ("padding:" <>) >>> putStrLn)
ivb & (show >>> ("initial padded canvas:" <>) >>> putStrLn)
hc0 & view styleBox' & NH.traverse_ (show >>> ("hc0:" <>) >>> putStrLn)
csAndHud' & view styleBox' & NH.traverse_ (show >>> ("runHudWith:" <>) >>> putStrLn)

-- projectWith
ratio new & (show >>> ("ratio new:" <>) >>> putStrLn)
ratio old & (show >>> ("ratio old:" <>) >>> putStrLn)
pwRatio & (show >>> ("scale ratio:" <>) >>> putStrLn)


db' & (show >>> ("data box padded:" <>) >>> putStrLn)

svgViewbox (Rect x z y w) = (x, (-w), (z-x), (w-y))
svgvb = svgViewbox <$> (view styleBox' csm)
svgvb & NH.traverse_ (show >>> ("svg viewbox:" <>) >>> putStrLn)

#+end_src

#+RESULTS:
#+begin_example
True
co:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
initial canvas:Rect -0.5 0.5 -0.5 0.5
initial chart:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
csAndHud:Rect -0.815315315315315 0.8153153153153154 -0.5 0.5
final canvas:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
single proj:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
multi proj:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
padding:Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
initial padded canvas:Rect -0.815315315315315 0.815315315315315 -0.5 0.5
hc0:Rect -0.815315315315315 0.8153153153153154 -0.5 0.5
runHudWith:Rect -0.815315315315315 0.8153153153153154 -0.5 0.5
ratio new:1.63063063063063
ratio old:1.63063063063063
scale ratio:15.015015015015013
data box padded:Rect -0.5 0.5 -0.5 0.5
svg viewbox:(-0.8153153153153152,-0.5,1.6306306306306304,1.0)
#+end_example

** Done FixedAspect + no hud
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-26 Sun 12:04]
- State "Done"       from "Next"       [2023-11-26 Sun 07:59]
- State "Done"       from              [2023-11-26 Sun 07:50]
- State "Done"       from              [2023-11-24 Fri 18:03]
:END:

With no hud, the viewbox is keyed off of the styleBox of the chart, which is different to the FixedAspect 1 requested.

#+begin_src haskell-ng :results output
co = jam & set (#markupOptions % #chartAspect) (FixedAspect 1) & set #hudOptions mempty & set (#charts % charts' % each % #style % #scaleP) ScaleMinDim & set (#charts % charts' % each % #style % #anchor) AnchorMiddle
display co

asp = co & view (#markupOptions % #chartAspect)
icanvas = initialCanvas asp Nothing
cs = view #charts co
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
csAndHudSingle = set styleBox' (Just viewbox) csAndHud
csm = set (styleBoxN' 10) (Just viewbox) csAndHud
csp = projectChartWith (view (#markupOptions % #repeatAspect) co) (view (#markupOptions % #chartAspect) co) (view #hudOptions co) cs

-- addHud
ho = view #hudOptions co
db = maybe one padSingletons (view box' cs)
(mdb, hs) = toHuds ho db
csPadded = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
ivb = initialCanvas asp (Just csPadded)
db' = fromMaybe db mdb
csAndHud' = runHudWith ivb db' hs csPadded
hc0 = cs & set styleBox' (Just ivb)

-- projectWith
new = ivb
old = fromMaybe one $ view styleBox' csPadded
csPaddeds = toListOf charts' csPadded & mconcat
pwData = csPaddeds & over (each % #chartData) (projectChartDataWith new old)
pwC = pwData & over (each % #style) (\s -> scaleStyle (scaleRatio (view #scaleP s) new old) s)
pwRatio = scaleRatio (view #scaleP (head $ view #style <$> pwC)) new old
pwStyle = view #style (head pwC)
pwC' = unnamed pwC


csp & view styleBox' & NH.traverse_ (show >>> ("co:" <>) >>> putStrLn)

icanvas & (show >>> ("initial canvas:" <>) >>> putStrLn)
cs & view styleBox' & NH.traverse_ (show >>> ("initial chart:" <>) >>> putStrLn)
csAndHud & view styleBox' & NH.traverse_ (show >>> ("csAndHud:" <>) >>> putStrLn)
viewbox & (show >>> ("final canvas:" <>) >>> putStrLn)
csAndHudSingle & view styleBox' & NH.traverse_ (show >>> ("single proj:" <>) >>> putStrLn)
csm & view styleBox' & NH.traverse_ (show >>> ("multi proj:" <>) >>> putStrLn)
csPadded & view styleBox' & NH.traverse_ (show >>> ("padding:" <>) >>> putStrLn)
ivb & (show >>> ("initial padded canvas:" <>) >>> putStrLn)
hc0 & view styleBox' & NH.traverse_ (show >>> ("hc0:" <>) >>> putStrLn)
csAndHud' & view styleBox' & NH.traverse_ (show >>> ("runHudWith:" <>) >>> putStrLn)

-- projectWith
ratio new & (show >>> ("ratio new:" <>) >>> putStrLn)
ratio old & (show >>> ("ratio old:" <>) >>> putStrLn)
pwRatio & (show >>> ("scale ratio:" <>) >>> putStrLn)

db' & (show >>> ("data box padded:" <>) >>> putStrLn)

svgViewbox (Rect x z y w) = (x, (-w), (z-x), (w-y))
svgvb = svgViewbox <$> (view styleBox' csm)
svgvb & NH.traverse_ (show >>> ("svg viewbox:" <>) >>> putStrLn)

#+end_src

#+RESULTS:
#+begin_example
True
co:Rect -0.5000000000000002 0.5000000000000002 -0.3937335125180429 0.2195261559902446
initial canvas:Rect -0.5 0.5 -0.5 0.5
initial chart:Rect -5.4299999999999994e-2 5.4299999999999994e-2 -1.8300000000000004e-2 4.83e-2
csAndHud:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
final canvas:Rect -0.5 0.5 -0.5 0.5
single proj:Rect -0.5000000000000002 0.5000000000000002 -0.3937335125180429 0.2195261559902446
multi proj:Rect -0.5000000000000002 0.5000000000000002 -0.3937335125180429 0.2195261559902446
padding:Rect -5.4299999999999994e-2 5.4299999999999994e-2 -1.8300000000000004e-2 4.83e-2
initial padded canvas:Rect -0.5 0.5 -0.5 0.5
hc0:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
runHudWith:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
ratio new:1.0
ratio old:1.6306306306306302
scale ratio:9.208103130755065
data box padded:Rect -0.5 0.5 -0.5 0.5
svg viewbox:(-0.5000000000000002,-0.2195261559902446,1.0000000000000004,0.6132596685082875)
#+end_example

#+begin_src haskell-ng :results output
toListOf (each % #chartData) csPaddeds
toListOf (each % #chartData) pwData
exp1 = csPaddeds & over (each % #chartData) id & over (each % #style) (\s -> scaleStyle 6 (set #scaleP ScaleMinDim s))
#+end_src

#+RESULTS:
: [TextData [("jam",Point 0.0 0.0)]]
: [TextData [("jam",Point -5.551115123125783e-17 -0.2252252252252252)]]
: True

** Done FixedAspect + zero frame
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-26 Sun 12:08]
- State "Done"       from "Next"       [2023-11-26 Sun 12:04]
- State "Done"       from "Next"       [2023-11-26 Sun 07:59]
- State "Done"       from              [2023-11-26 Sun 07:50]
- State "Done"       from              [2023-11-24 Fri 18:03]
:END:

#+begin_src haskell-ng :results output
co = jam & set (#markupOptions % #chartAspect) (FixedAspect 1) & set #hudOptions mempty & set (#charts % charts' % each % #style % #scaleP) ScaleMinDim & set (#charts % charts' % each % #style % #anchor) AnchorMiddle & set (#hudOptions % #frames) [(100,defaultFrameOptions & set #buffer 0 & set #frame (Just $ blob (grey 0.5 0.1)))]
display co

asp = co & view (#markupOptions % #chartAspect)
icanvas = initialCanvas asp Nothing
cs = view #charts co
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
csAndHudSingle = set styleBox' (Just viewbox) csAndHud
csm = set (styleBoxN' 10) (Just viewbox) csAndHud
csp = projectChartWith (view (#markupOptions % #repeatAspect) co) (view (#markupOptions % #chartAspect) co) (view #hudOptions co) cs

-- addHud
ho = view #hudOptions co
db = maybe one padSingletons (view box' cs)
(mdb, hs) = toHuds ho db
csPadded = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
ivb = initialCanvas asp (Just csPadded)
db' = fromMaybe db mdb
csAndHud' = runHudWith ivb db' hs csPadded
hc0 = cs & set styleBox' (Just ivb)

-- projectWith
new = ivb
old = fromMaybe one $ view styleBox' csPadded
csPaddeds = toListOf charts' csPadded & mconcat
pwData = csPaddeds & over (each % #chartData) (projectChartDataWith new old)
pwC = pwData & over (each % #style) (\s -> scaleStyle (scaleRatio (view #scaleP s) new old) s)
pwRatio = scaleRatio (view #scaleP (head $ view #style <$> pwC)) new old
pwStyle = view #style (head pwC)
pwC' = unnamed pwC


csp & view styleBox' & NH.traverse_ (show >>> ("co:" <>) >>> putStrLn)

icanvas & (show >>> ("initial canvas:" <>) >>> putStrLn)
cs & view styleBox' & NH.traverse_ (show >>> ("initial chart:" <>) >>> putStrLn)
csAndHud & view styleBox' & NH.traverse_ (show >>> ("csAndHud:" <>) >>> putStrLn)
viewbox & (show >>> ("final canvas:" <>) >>> putStrLn)
csAndHudSingle & view styleBox' & NH.traverse_ (show >>> ("single proj:" <>) >>> putStrLn)
csm & view styleBox' & NH.traverse_ (show >>> ("multi proj:" <>) >>> putStrLn)
csPadded & view styleBox' & NH.traverse_ (show >>> ("padding:" <>) >>> putStrLn)
ivb & (show >>> ("initial padded canvas:" <>) >>> putStrLn)
hc0 & view styleBox' & NH.traverse_ (show >>> ("hc0:" <>) >>> putStrLn)
csAndHud' & view styleBox' & NH.traverse_ (show >>> ("runHudWith:" <>) >>> putStrLn)

-- projectWith
ratio new & (show >>> ("ratio new:" <>) >>> putStrLn)
ratio old & (show >>> ("ratio old:" <>) >>> putStrLn)
pwRatio & (show >>> ("scale ratio:" <>) >>> putStrLn)

db' & (show >>> ("data box padded:" <>) >>> putStrLn)

svgViewbox (Rect x z y w) = (x, (-w), (z-x), (w-y))
svgvb = svgViewbox <$> (view styleBox' csm)
svgvb & NH.traverse_ (show >>> ("svg viewbox:" <>) >>> putStrLn)

#+end_src

#+RESULTS:
#+begin_example
True
co:Rect -0.5000000000000002 0.5000000000000002 -0.5 0.5
initial canvas:Rect -0.5 0.5 -0.5 0.5
initial chart:Rect -5.4299999999999994e-2 5.4299999999999994e-2 -1.8300000000000004e-2 4.83e-2
csAndHud:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
final canvas:Rect -0.5 0.5 -0.5 0.5
single proj:Rect -0.5000000000000002 0.5000000000000002 -0.5 0.5
multi proj:Rect -0.5000000000000002 0.5000000000000002 -0.5 0.5
padding:Rect -5.4299999999999994e-2 5.4299999999999994e-2 -1.8300000000000004e-2 4.83e-2
initial padded canvas:Rect -0.5 0.5 -0.5 0.5
hc0:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
runHudWith:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
ratio new:1.0
ratio old:1.6306306306306302
scale ratio:9.208103130755065
data box padded:Rect -0.5 0.5 -0.5 0.5
svg viewbox:(-0.5000000000000002,-0.5,1.0000000000000004,1.0)
#+end_example

** Done CanvasAspect + zero frame
:LOGBOOK:
- State "Done"       from "Next"       [2023-11-26 Sun 12:08]
- State "Done"       from "Next"       [2023-11-26 Sun 12:04]
- State "Done"       from "Next"       [2023-11-26 Sun 07:59]
- State "Done"       from              [2023-11-26 Sun 07:50]
- State "Done"       from              [2023-11-24 Fri 18:03]
:END:

#+begin_src haskell-ng :results output
co = jam & set (#markupOptions % #chartAspect) (CanvasAspect 1) & set #hudOptions mempty & set (#charts % charts' % each % #style % #scaleP) ScaleMinDim & set (#charts % charts' % each % #style % #anchor) AnchorMiddle & set (#hudOptions % #frames) [(100,defaultFrameOptions & set #buffer 0 & set #frame (Just $ blob (grey 0.5 0.1)))]
display co

asp = co & view (#markupOptions % #chartAspect)
icanvas = initialCanvas asp Nothing
cs = view #charts co
csAndHud = addHud (view (#markupOptions % #chartAspect) co) (view #hudOptions co) (view #charts co)
viewbox = finalCanvas asp (Just csAndHud)
csAndHudSingle = set styleBox' (Just viewbox) csAndHud
csm = set (styleBoxN' 10) (Just viewbox) csAndHud
csp = projectChartWith (view (#markupOptions % #repeatAspect) co) (view (#markupOptions % #chartAspect) co) (view #hudOptions co) cs

-- addHud
ho = view #hudOptions co
db = maybe one padSingletons (view box' cs)
(mdb, hs) = toHuds ho db
csPadded = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
ivb = initialCanvas asp (Just csPadded)
db' = fromMaybe db mdb
csAndHud' = runHudWith ivb db' hs csPadded
hc0 = cs & set styleBox' (Just ivb)

-- projectWith
new = ivb
old = fromMaybe one $ view styleBox' csPadded
csPaddeds = toListOf charts' csPadded & mconcat
pwData = csPaddeds & over (each % #chartData) (projectChartDataWith new old)
pwC = pwData & over (each % #style) (\s -> scaleStyle (scaleRatio (view #scaleP s) new old) s)
pwRatio = scaleRatio (view #scaleP (head $ view #style <$> pwC)) new old
pwStyle = view #style (head pwC)
pwC' = unnamed pwC


csp & view styleBox' & NH.traverse_ (show >>> ("co:" <>) >>> putStrLn)

icanvas & (show >>> ("initial canvas:" <>) >>> putStrLn)
cs & view styleBox' & NH.traverse_ (show >>> ("initial chart:" <>) >>> putStrLn)
csAndHud & view styleBox' & NH.traverse_ (show >>> ("csAndHud:" <>) >>> putStrLn)
viewbox & (show >>> ("final canvas:" <>) >>> putStrLn)
csAndHudSingle & view styleBox' & NH.traverse_ (show >>> ("single proj:" <>) >>> putStrLn)
csm & view styleBox' & NH.traverse_ (show >>> ("multi proj:" <>) >>> putStrLn)
csPadded & view styleBox' & NH.traverse_ (show >>> ("padding:" <>) >>> putStrLn)
ivb & (show >>> ("initial padded canvas:" <>) >>> putStrLn)
hc0 & view styleBox' & NH.traverse_ (show >>> ("hc0:" <>) >>> putStrLn)
csAndHud' & view styleBox' & NH.traverse_ (show >>> ("runHudWith:" <>) >>> putStrLn)

-- projectWith
ratio new & (show >>> ("ratio new:" <>) >>> putStrLn)
ratio old & (show >>> ("ratio old:" <>) >>> putStrLn)
pwRatio & (show >>> ("scale ratio:" <>) >>> putStrLn)

db' & (show >>> ("data box padded:" <>) >>> putStrLn)

svgViewbox (Rect x z y w) = (x, (-w), (z-x), (w-y))
svgvb = svgViewbox <$> (view styleBox' csm)
svgvb & NH.traverse_ (show >>> ("svg viewbox:" <>) >>> putStrLn)

#+end_src

#+RESULTS:
#+begin_example
True
co:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
initial canvas:Rect -0.5 0.5 -0.5 0.5
initial chart:Rect -5.4299999999999994e-2 5.4299999999999994e-2 -1.8300000000000004e-2 4.83e-2
csAndHud:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
final canvas:Rect -0.8153153153153151 0.8153153153153151 -0.5 0.5
single proj:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
multi proj:Rect -0.8153153153153152 0.8153153153153152 -0.5 0.5
padding:Rect -5.4299999999999994e-2 5.4299999999999994e-2 -1.8300000000000004e-2 4.83e-2
initial padded canvas:Rect -0.5 0.5 -0.5 0.5
hc0:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
runHudWith:Rect -0.5 0.4999999999999999 -0.39373351251804295 0.2195261559902445
ratio new:1.0
ratio old:1.6306306306306302
scale ratio:9.208103130755065
data box padded:Rect -0.5 0.5 -0.5 0.5
svg viewbox:(-0.8153153153153152,-0.5,1.6306306306306304,1.0)
#+end_example

** styleBoxText
:LOGBOOK:
- State "Done"       from              [2023-11-26 Sun 07:37]
:END:

- Anchors ok
- scaleps ok

#+begin_src haskell-ng :results output
s0 = defaultTextStyle & set #frame (Just $ defaultRectStyle) & set #anchor AnchorStart & set #scaleP NoScaleP
r0 = styleBoxText s0 "jam" (Point 0 0)
r1 = styleBoxText (scaleStyle 2 s0) "jam" (Point 0 0)
r0
r1
(\x y -> x - 2 * y) <$> r1 <*> r0
#+end_src

#+RESULTS:
: Rect -3.0e-4 0.10829999999999998 -1.8300000000000004e-2 4.83e-2
: Rect -6.0e-4 0.21659999999999996 -3.660000000000001e-2 9.66e-2
: Rect 0.0 0.0 0.0 0.0

#+begin_src haskell-ng :results output
import Data.Text qualified as Text
t = "jam"
o = s0
p = Point 0 0
s = o ^. #size
h = o ^. #hsize
v = o ^. #vsize
n1 = o ^. #vshift
x' = s * h * fromIntegral (Text.length t)
y' = s * v
n1' = (-s) * n1
a' = case o ^. #anchor of; AnchorStart -> 0.5; AnchorEnd -> -0.5; AnchorMiddle -> 0.0
mpad = maybe id (\f -> padRect (0.5 * view #borderSize f * view #size o)) (view #frame o)
flat = Rect ((-x' / 2.0) + x' * a') (x' / 2 + x' * a') (-y' / 2 + n1') (y' / 2 + n1')
mpad $ move p $ maybe flat (`rotationBound` flat) (o ^. #rotation)
flat
#+end_src

#+RESULTS:
: Rect -5.4299999999999994e-2 5.4299999999999994e-2 -1.8300000000000004e-2 4.83e-2
: Rect -5.399999999999999e-2 5.399999999999999e-2 -1.8000000000000002e-2 4.8e-2

#+begin_src haskell-ng :results output
import Data.Text qualified as Text
t = "jam"
o = scaleStyle 2 s0
p = Point 0 0
s = o ^. #size
h = o ^. #hsize
v = o ^. #vsize
n1 = o ^. #vshift
x' = s * h * fromIntegral (Text.length t)
y' = s * v
n1' = (-s) * n1
a' = case o ^. #anchor of; AnchorStart -> 0.5; AnchorEnd -> -0.5; AnchorMiddle -> 0.0
mpad = maybe id (\f -> padRect (0.5 * view #borderSize f * view #size o)) (view #frame o)
flat = Rect ((-x' / 2.0) + x' * a') (x' / 2 + x' * a') (-y' / 2 + n1') (y' / 2 + n1')
mpad $ move p $ maybe flat (`rotationBound` flat) (o ^. #rotation)
flat
#+end_src

#+RESULTS:
: Rect -0.10859999999999999 0.10859999999999999 -3.660000000000001e-2 9.66e-2
: Rect -0.10799999999999998 0.10799999999999998 -3.6000000000000004e-2 9.6e-2

** markup manual checks

- [X] initial padded canvas

#+begin_src haskell-ng :results output
view styleBox' csPadded & fmap (ratio * 0.5 >>> (== (let (Rect _ z _ _) = ivb in z)))
#+end_src

#+RESULTS:
: Just False

- [X] viewbox svg (x,y,width,height): -0.0003 -0.0483 0.1086 0.0666
- [X] height: 300
- [X] width: 489 = 0.1086 / 0.0666 * 300
- [X] font-size: 0.06 * 15.015015015015013 = .9009
- [X] border-size: 0.0090 (border-size 0.01 * font-size)
- [X] text rect:  viewbox - 1/2 * border size

#+begin_src haskell-ng :results output
pPrint $ markupChartOptions co
#+end_src

#+RESULTS:
#+begin_example
Markup
    { elements =
        [ Node
            { rootLabel = OpenTag StartTag "svg"
                [ Attr
                    { attrName = "xmlns"
                    , attrValue = "http://www.w3.org/2000/svg"
                    }
                , Attr
                    { attrName = "xmlns:xlink"
                    , attrValue = "http://www.w3.org/1999/xlink"
                    }
                , Attr
                    { attrName = "width"
                    , attrValue = "489"
                    }
                , Attr
                    { attrName = "height"
                    , attrValue = "300"
                    }
                , Attr
                    { attrName = "viewBox"
                    , attrValue = "-0.5000 -0.2195 1.0000 0.6133"
                    }
                ]
            , subForest =
                [ Node
                    { rootLabel = OpenTag StartTag "style" []
                    , subForest =
                        [ Node
                            { rootLabel = Content "svg {
                                color-scheme: light dark;
                              }
                              {
                                .canvas g, .title g, .axisbar g, .ticktext g, .tickglyph g, .ticklines g, .legendContent g text {
                                  fill: rgb(5%, 5%, 5%);
                                }
                                .ticklines g, .tickglyph g, .legendBorder g {
                                  stroke: rgb(5%, 5%, 5%);
                                }
                                .legendBorder g {
                                  fill: rgb(94%, 94%, 94%);
                                }
                              }
                              @media (prefers-color-scheme:dark) {
                                .canvas g, .title g, .axisbar g, .ticktext g, .tickglyph g, .ticklines g, .legendContent g text {
                                  fill: rgb(94%, 94%, 94%);
                                }
                                .ticklines g, .tickglyph g, .legendBorder g {
                                  stroke: rgb(94%, 94%, 94%);
                                }
                                .legendBorder g {
                                  fill: rgb(5%, 5%, 5%);
                                }
                              }"
                            , subForest = []
                            }
                        ]
                    }
                , Node
                    { rootLabel = OpenTag StartTag "g"
                        [ Attr
                            { attrName = "class"
                            , attrValue = "chart"
                            }
                        ]
                    , subForest =
                        [ Node
                            { rootLabel = OpenTag StartTag "g"
                                [ Attr
                                    { attrName = "stroke-width"
                                    , attrValue = "0.0"
                                    }
                                , Attr
                                    { attrName = "stroke"
                                    , attrValue = "none"
                                    }
                                , Attr
                                    { attrName = "fill"
                                    , attrValue = "rgb(5%, 5%, 5%)"
                                    }
                                , Attr
                                    { attrName = "fill-opacity"
                                    , attrValue = "1.0"
                                    }
                                , Attr
                                    { attrName = "font-size"
                                    , attrValue = "0.5525"
                                    }
                                , Attr
                                    { attrName = "text-anchor"
                                    , attrValue = "middle"
                                    }
                                ]
                            , subForest =
                                [ Node
                                    { rootLabel = OpenTag StartTag "g"
                                        [ Attr
                                            { attrName = "stroke-width"
                                            , attrValue = "0.0055"
                                            }
                                        , Attr
                                            { attrName = "stroke"
                                            , attrValue = "rgb(2%, 29%, 48%)"
                                            }
                                        , Attr
                                            { attrName = "stroke-opacity"
                                            , attrValue = "1.0"
                                            }
                                        , Attr
                                            { attrName = "fill"
                                            , attrValue = "rgb(2%, 73%, 80%)"
                                            }
                                        , Attr
                                            { attrName = "fill-opacity"
                                            , attrValue = "0.1"
                                            }
                                        ]
                                    , subForest =
                                        [ Node
                                            { rootLabel = OpenTag EmptyElemTag "rect"
                                                [ Attr
                                                    { attrName = "width"
                                                    , attrValue = "0.9945"
                                                    }
                                                , Attr
                                                    { attrName = "height"
                                                    , attrValue = "0.6077"
                                                    }
                                                , Attr
                                                    { attrName = "x"
                                                    , attrValue = "-0.4972"
                                                    }
                                                , Attr
                                                    { attrName = "y"
                                                    , attrValue = "-0.2168"
                                                    }
                                                ]
                                            , subForest = []
                                            }
                                        ]
                                    }
                                , Node
                                    { rootLabel = OpenTag StartTag "text"
                                        [ Attr
                                            { attrName = "x"
                                            , attrValue = "0"
                                            }
                                        , Attr
                                            { attrName = "y"
                                            , attrValue = "0.2252"
                                            }
                                        ]
                                    , subForest =
                                        [ Node
                                            { rootLabel = Content "jam"
                                            , subForest = []
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                , Node
                    { rootLabel = OpenTag StartTag "g"
                        [ Attr
                            { attrName = "class"
                            , attrValue = "hud"
                            }
                        ]
                    , subForest = []
                    }
                ]
            }
        ]
    }
#+end_example

* text and points

#+begin_src haskell-ng :results output
exampleText <- fmap T.pack <$> replicateM 2 (unwords <$> replicateM 3 word)
exampleText
#+end_src

#+RESULTS:
: ["quia qui aut"]

#+begin_src haskell-ng :results output
exampleText <- fmap T.pack <$> replicateM 2 (unwords <$> replicateM 3 word)
tsNoScale = defaultTextStyle & set #frame (Just $ defaultRectStyle) & set #anchor AnchorStart & set #scaleP NoScaleP
tsScale = defaultTextStyle & set #frame (Just $ defaultRectStyle) & set #anchor AnchorStart & set #scaleP ScalePArea

textNoScale = zipWith (\t x -> TextChart tsNoScale [(t, Point 0 x)]) exampleText [0..]
textScale = zipWith (\t x -> TextChart tsScale [(t, Point 0 (x+0.2))]) exampleText [0..]
points = Chart defaultGlyphStyle $ GlyphData ((CircleGlyph,) <$> (Point 0 0 :corners4 (Rect 0 1 (-0.5) 0.5)))
cs = textScale <> [points]
csNo = textNoScale <> [points]
ct = unnamed cs
tandp = mempty & #charts .~ ct & #markupOptions % #chartAspect .~ FixedAspect 1 :: ChartOptions
tandpNo = mempty & #charts .~ unnamed csNo & #markupOptions % #chartAspect .~ FixedAspect 1 :: ChartOptions
display tandpNo
#+end_src

#+RESULTS:
: True

* fonts

system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";

SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;

* Non-singular Text

#+begin_src haskell-ng :results output
co = (mempty :: ChartOptions) & set #charts (unnamed [TextChart defaultTextStyle [("jim", Point 0 0), ("jam",Point 1 1)]]) & set (#charts % charts' % each % #style % #frame) (Just defaultRectStyle) & set #hudOptions defaultHudOptions & set (#charts % charts' % each % #style % #size) 0.2 & set (#charts % charts' % each % #style % #vshift) 0
display co
#+end_src

#+RESULTS:
: True

* Done HudChart lens audit
:LOGBOOK:
- State "Done"       from "ToDo"       [2023-12-02 Sat 15:53]
:END:

canvasBox'
  makeAxisBar
  tickGlyph
  tickText
  tickLine

hudStyleBox'
  frameHud
  makeAxisBar
  title
  tickText
  legendHud

hudBox'
  tickGlyph
  makeTick

* Done ScaleBorder removal
:LOGBOOK:
- State "Done"       from              [2023-11-30 Thu 14:36]
:END:

#+begin_src haskell-ng :results output
display $ glyphsExample & set (#markupOptions % #chartAspect) (FixedAspect 6) & set (#markupOptions % #markupHeight) (Just 200)
#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
:t glyphsExample & over (#charts % charts' % _last) (fmap id) -- ((\(PathGlyph p _, pt) -> (PathGlyph p NoScaleBorder,pt))))
#+end_src

#+RESULTS:
#+begin_example
<interactive>:1:43: error:
    • Couldn't match type ‘f0 a0’ with ‘Chart’
        arising from a functional dependency between:
          constraint ‘Snoc [Chart] [Chart] (f0 a0) (f0 a0)’
            arising from a use of ‘_last’
          instance ‘Snoc [a] [b] a b’ at <no location info>
    • In the second argument of ‘(%)’, namely ‘_last’
      In the first argument of ‘over’, namely
        ‘(#charts % charts' % _last)’
      In the second argument of ‘(&)’, namely
        ‘over (#charts % charts' % _last) (fmap id)’
#+end_example

* Done HudChartSection
:LOGBOOK:
- State "Done"       from "Next"       [2023-12-02 Sat 16:31]
:END:

- [X] axis bar
  - [X] lens with AnchoredTo option
- [X] distortion in tickGlyphs due to NoScaleP
- [X] glyph ticks are a consistent hair away from the axis bar
- [X] textExample and others are a long way away
- [X] decide on axis bar and glyph tick buffers and section anchors
  0.01 0.015

#+begin_src haskell-ng :results output
display $ unitExample & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #buffer) 0.01 & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #anchorTo) CanvasSection
#+end_src

#+RESULTS:
: True

** decomp

UnscaledAspect is perfect, and then ChartAspect stuffs everything up:

#+begin_src haskell-ng :results output
sec = CanvasStyleSection
asp = UnscaledAspect
co = unitExample & set (#hudOptions % #axes % each % #item % #bar %? #buffer) 0.0 & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #buffer) 0.0 & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #anchorTo) sec & set (#markupOptions % #chartAspect) asp  & set (#hudOptions % #axes % each % #item % #ticks % #style % tickExtend' % _Just) TickExtend & set (#hudOptions % #axes % each % #item % #bar %? #anchorTo) sec & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #item % #size) 0.10 & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #item % #shape) SquareGlyph & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #item % #scaleP) NoScaleP & set (#hudOptions % #axes % each % #item % #ticks % #lineTick) Nothing & set (#hudOptions % #axes % each % #item % #ticks % #textTick) Nothing & set (#hudOptions % #frames) []
display co

#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
co & view (#hudOptions % #frames)
#+end_src

#+begin_src haskell-ng :results output
:set -Wno-incomplete-uni-patterns
-- pPrint $ (forgetHud co) & view (#chartTree % #tree) & fmap (second (toListOf (each % #chartData)))
co' = forgetHud co
display co'
xs = filter (/=[]) $ (forgetHud co) & toListOf (#chartTree % charts') & fmap (fmap (view #chartData))
(Just b') = view styleBox' (view #chartTree co')
(Just bca') = view styleBox' (view #chartTree (forgetHud $ co & set (#markupOptions % #chartAspect) ChartAspect))
b'
bca'
ratio b'
ratio bca'
csUnscaled = addHud UnscaledAspect (view #hudOptions co) (view #chartTree co)
csChartScaled = addHud ChartAspect (view #hudOptions co) (view #chartTree co)
view styleBox' csUnscaled
view styleBox' csChartScaled
(initialCanvas UnscaledAspect (Just (view #chartTree co)))
(initialCanvas ChartAspect (Just (view #chartTree co)))
#+end_src

unscaled runHudWith breakup

#+begin_src haskell-ng :results output
cs = view #chartTree co
ho = view #hudOptions co
asp = UnscaledAspect
    db = maybe one padSingletons (view box' cs)
    (mdb, hs) = toHuds ho db
    cs' = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
    asp0 = initialCanvas asp (Just cs')
    csAndHud = runHudWith asp0 hs cs'
view styleBox' cs'
asp0
view styleBox' csAndHud
unscaledCSsAndHud = csAndHud
#+end_src

#+RESULTS:
: Just Rect (-0.6000000000000001) 0.6000000000000001 (-0.6000000000000001) 0.6000000000000001
: Rect (-0.6000000000000001) 0.6000000000000001 (-0.6000000000000001) 0.6000000000000001
: Just Rect (-0.7040000000000002) 0.6520000000000001 (-0.7040000000000002) 0.6520000000000001

ChartAspect runHudWith breakup

#+begin_src haskell-ng :results output
cs = view #chartTree co
ho = view #hudOptions co
asp = ChartAspect
    db = maybe one padSingletons (view box' cs)
    (mdb, hs) = toHuds ho db
    cs' = cs <> maybe mempty (\r -> bool (named "datapadding" [BlankChart defaultStyle [r]]) mempty (r == db)) mdb
    asp0 = initialCanvas asp (Just cs')
    csAndHud = runHudWith asp0 hs cs'
view styleBox' cs'
asp0
view styleBox' csAndHud
vb = finalCanvas asp (Just csAndHud)
vb
view styleBox' (projectChartWith asp ho cs)
display $ (mempty :: ChartOptions) & set #chartTree csAndHud & set (#markupOptions % #chartAspect) UnscaledAspect
#+end_src

#+RESULTS:
: Just Rect (-0.6000000000000001) 0.6000000000000001 (-0.6000000000000001) 0.6000000000000001
: Rect (-0.5) 0.5 (-0.5) 0.5
: Just Rect (-0.6040000000000001) 0.552 (-0.6040000000000001) 0.552
: Rect (-0.5) 0.5 (-0.5) 0.5
: Just Rect (-0.49999999999999994) 0.49999999999999994 (-0.49999999999999994) 0.49999999999999994
: True


The problem is in the final set styleBox', which is operating on NoScaleP styled charts:

#+begin_src haskell-ng :results output
ctFinal = set styleBox' (Just vb) $ csAndHud & set (charts' % each % #style % #scaleP) ScalePY
display $ (mempty :: ChartOptions) & set #chartTree ctFinal & set (#markupOptions % #chartAspect) (FixedAspect 1.5)
#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
csAndHud & toListOf (charts' % each % #style % #scaleP)
#+end_src

#+RESULTS:
: [NoScaleP,NoScaleP,NoScaleP,NoScaleP,NoScaleP,NoScaleP]

** solution

Scale the xaxis by ScalePX etc:


#+begin_src haskell-ng :results output
sec = CanvasSection
asp = FixedAspect 1.5
co = unitExample & set (#hudOptions % #axes % each % #item % #bar %? #buffer) 0.0 & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #buffer) 0.0 & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #anchorTo) sec & set (#markupOptions % #chartAspect) asp  & set (#hudOptions % #axes % each % #item % #ticks % #style % tickExtend' % _Just) TickExtend & set (#hudOptions % #axes % each % #item % #bar %? #anchorTo) sec & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #item % #size) 0.10 & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #item % #shape) SquareGlyph & set (#hudOptions % #axes % each % #item % #ticks % #glyphTick %? #style % #item % #scaleP) NoScaleP & set (#hudOptions % #axes % each % #item % #ticks % #lineTick) Nothing & set (#hudOptions % #axes % each % #item % #ticks % #textTick) Nothing & set (#hudOptions % #frames) [] & set (#hudOptions % #axes % ix 0 % #item % #ticks % #glyphTick %? #style % #item % #scaleP) ScalePX & set (#hudOptions % #axes % ix 1 % #item % #ticks % #glyphTick %? #style % #item % #scaleP) ScalePY
display co

#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
display $ unitExample & set (#markupOptions % #chartAspect) UnscaledAspect
#+end_src

#+RESULTS:
: True

* Done mempty
:LOGBOOK:
- State "Done"       from "Next"       [2023-12-02 Sat 19:07]
:END:

#+begin_src haskell-ng :results output
display $ mempty & set #chartTree (view #chartTree unitExample)
#+end_src

#+RESULTS:
: True

#+begin_src haskell-ng :results output
pPrint $ mempty & set #chartTree (view #chartTree unitExample) & markupChartOptions
#+end_src

#+RESULTS:
#+begin_example
Markup
    { elements =
        [ Node
            { rootLabel = OpenTag StartTag "svg"
                [ Attr
                    { attrName = "xmlns"
                    , attrValue = "http://www.w3.org/2000/svg"
                    }
                , Attr
                    { attrName = "xmlns:xlink"
                    , attrValue = "http://www.w3.org/1999/xlink"
                    }
                , Attr
                    { attrName = "width"
                    , attrValue = "449"
                    }
                , Attr
                    { attrName = "height"
                    , attrValue = "300"
                    }
                , Attr
                    { attrName = "viewBox"
                    , attrValue = "-0.7500 -0.5000 1.5000 1.0000"
                    }
                ]
            , subForest =
                [ Node
                    { rootLabel = OpenTag StartTag "style" []
                    , subForest =
                        [ Node
                            { rootLabel = Content "svg {
                                color-scheme: light dark;
                              }
                              {
                                .canvas g, .title g, .axisbar g, .ticktext g, .tickglyph g, .ticklines g, .legendContent g text {
                                  fill: rgb(5%, 5%, 5%);
                                }
                                .ticklines g, .tickglyph g, .legendBorder g {
                                  stroke: rgb(5%, 5%, 5%);
                                }
                                .legendBorder g {
                                  fill: rgb(94%, 94%, 94%);
                                }
                              }
                              @media (prefers-color-scheme:dark) {
                                .canvas g, .title g, .axisbar g, .ticktext g, .tickglyph g, .ticklines g, .legendContent g text {
                                  fill: rgb(94%, 94%, 94%);
                                }
                                .ticklines g, .tickglyph g, .legendBorder g {
                                  stroke: rgb(94%, 94%, 94%);
                                }
                                .legendBorder g {
                                  fill: rgb(5%, 5%, 5%);
                                }
                              }
                              svg { font-family: system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
                              }

                              ticktext { font-family: SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
                              }

                              "
                            , subForest = []
                            }
                        ]
                    }
                , Node
                    { rootLabel = OpenTag StartTag "g"
                        [ Attr
                            { attrName = "class"
                            , attrValue = "chart"
                            }
                        ]
                    , subForest =
                        [ Node
                            { rootLabel = OpenTag StartTag "g"
                                [ Attr
                                    { attrName = "class"
                                    , attrValue = "unit"
                                    }
                                ]
                            , subForest =
                                [ Node
                                    { rootLabel = OpenTag StartTag "g"
                                        [ Attr
                                            { attrName = "stroke-width"
                                            , attrValue = "0.0100"
                                            }
                                        , Attr
                                            { attrName = "stroke"
                                            , attrValue = "rgb(2%, 29%, 48%)"
                                            }
                                        , Attr
                                            { attrName = "stroke-opacity"
                                            , attrValue = "1.0"
                                            }
                                        , Attr
                                            { attrName = "fill"
                                            , attrValue = "rgb(2%, 73%, 80%)"
                                            }
                                        , Attr
                                            { attrName = "fill-opacity"
                                            , attrValue = "0.1"
                                            }
                                        ]
                                    , subForest =
                                        [ Node
                                            { rootLabel = OpenTag EmptyElemTag "rect"
                                                [ Attr
                                                    { attrName = "width"
                                                    , attrValue = "1.4900"
                                                    }
                                                , Attr
                                                    { attrName = "height"
                                                    , attrValue = "0.9900"
                                                    }
                                                , Attr
                                                    { attrName = "x"
                                                    , attrValue = "-0.7450"
                                                    }
                                                , Attr
                                                    { attrName = "y"
                                                    , attrValue = "-0.4950"
                                                    }
                                                ]
                                            , subForest = []
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                , Node
                    { rootLabel = OpenTag StartTag "g"
                        [ Attr
                            { attrName = "class"
                            , attrValue = "hud"
                            }
                        ]
                    , subForest = []
                    }
                ]
            }
        ]
    }
#+end_example
* Done chart-svg mega cleanup checklist
:LOGBOOK:
- State "Done"       from "Next"       [2023-12-03 Sun 08:02]
:END:

- [X] rerun whole org file and observe results
- [X] styleBox' versus projectChartTree
- [X] text box bug
- [X] scaling text example
- [X] examples audit
- [X] NoScaleP needs to be the default for HudOption elements
- [X] audit ScaleP usage
- [X] toggle to switch to ScalePArea when the hud is forgotten
- [X] surface legend
- [X] check & fix examples
- [X] fix compound code and compoundExample
- [X] v06candidate1
- [X] Revisit anal [[file:~/haskell/anal/readme.org::*all in one][all in one]]
- [X] diff test back
- [X] code ToDos
- [X] remove canvasStyleBox'
- [X] remove multiple reboxing
- [X] palette1 ==> palette
- [X] #charts -> #chartTree
- [X] move GlyphShape back to Style
- [X] fix Rect show instance
- [X] priority refactor
- [X] buffered
- [X] better names for tick elements
- [X] remove placeText
- [X] tick lenses
- [X] remove Buffered, TextTickStyle, LineTickStyle
- [X] FrameOption anchorTo
- [X] review ScaleP
- [X] look at mempty examples for redundant markup snippets
  - [X] mempty & set #hudOptions defaultHudOptions & set #chartTree mempty produces a hud still?
- [X] replace .~ ~% ^.
