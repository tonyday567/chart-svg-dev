
* chart-svg-dev

[[https://hackage.haskell.org/package/chart-svg-dev][https://img.shields.io/hackage/v/chart-svg-dev.svg]]
[[https://github.com/tonyday567/chart-svg-dev/actions?query=workflow%3Ahaskell-ci][https://github.com/tonyday567/chart-svg-dev/workflows/haskell-ci/badge.svg]]

~chart-svg-dev~ is a development environment for chart-svg.

* Usage

#+begin_src haskell :results output
:r
:set prompt "> "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedLabels
:set -XOverloadedStrings
:set -XTupleSections
import Prelude
import Control.Category ((>>>))
import Data.Function
import Data.Maybe
import Data.Bool
import Faker.Lorem
import Chart
import Prettychart
import Chart.Examples
import Optics.Core
import Data.ByteString.Char8 qualified as C
import Data.Text qualified as T
import Control.Monad
print "imports loaded"
(display, quit) <- startChartServer (Just "chart-svg-dev")
disp x = display $ x & set (#markupOptions % #markupHeight) 250 & set (#hudOptions % #frames % ix 1 % _2 % #buffer) 0.1
#+end_src

#+RESULTS:
: [1 of 1] Compiling Lib              ( src/Lib.hs, interpreted )
: Ok, one module loaded.
: ghci> Ok, one module loaded.
: ghci
: >
: imports loaded
: Setting pha>s ers to stun... (port 9160) (ctrl-c to quit)

#+begin_src haskell :results output
disp unitExample
#+end_src

#+RESULTS:
: True

** Next Text chart (re)callibration

- more precise callibration between text, points and rect

#+begin_src haskell :results output
ts <- fmap T.pack <$> replicateM 4 (unwords <$> replicateM 3 word)
s = defaultTextStyle & #anchor .~ AnchorStart
ts' = zipWith (\t x -> TextChart s [(t, Point 0 x)]) ts [0..]
ts
#+end_src

#+RESULTS:
: ["ullam ad qui","voluptas inventore earum","ipsum fugiat qui","sapiente ad quisquam"]

#+begin_src haskell :results output
display $ mempty & #charts .~ unnamed ts'
#+end_src

#+RESULTS:
: True

#+begin_src haskell :results output
ts'
#+end_src

#+RESULTS:
: [TextChart (TextStyle {size = 0.12, color = Colour 0.05 0.05 0.05 1.00, anchor = AnchorStart, hsize = 0.45, vsize = 1.1, vshift = -0.25, rotation = Nothing, scalex = ScaleX, frame = Nothing}) [("ullam ad qui",Point 0.0 0.0)],TextChart (TextStyle {size = 0.12, color = Colour 0.05 0.05 0.05 1.00, anchor = AnchorStart, hsize = 0.45, vsize = 1.1, vshift = -0.25, rotation = Nothing, scalex = ScaleX, frame = Nothing}) [("voluptas inventore earum",Point 0.0 1.0)],TextChart (TextStyle {size = 0.12, color = Colour 0.05 0.05 0.05 1.00, anchor = AnchorStart, hsize = 0.45, vsize = 1.1, vshift = -0.25, rotation = Nothing, scalex = ScaleX, frame = Nothing}) [("ipsum fugiat qui",Point 0.0 2.0)],TextChart (TextStyle {size = 0.12, color = Colour 0.05 0.05 0.05 1.00, anchor = AnchorStart, hsize = 0.45, vsize = 1.1, vshift = -0.25, rotation = Nothing, scalex = ScaleX, frame = Nothing}) [("sapiente ad quisquam",Point 0.0 3.0)]]


#+begin_src haskell :results output
:t styleBoxes
r1 = RectChart defaultRectStyle [fromMaybe undefined $ styleBoxes ts']
#+end_src

#+RESULTS:
: styleBoxes :: [Chart] -> Maybe (Rect Double)

#+begin_src haskell :results output
t' = take 4 ts'
rDefault = RectChart defaultRectStyle [one]
ps = (\x -> GlyphChart defaultGlyphStyle [Point 0 x]) <$>  [0..3]
r1 = RectChart defaultRectStyle [fromMaybe undefined $ styleBoxes t']
display $ mempty & #charts .~ unnamed (t' <> [r1] <> ps)
#+end_src

#+RESULTS:
: True
